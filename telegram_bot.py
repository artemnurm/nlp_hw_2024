#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4.1-mini –æ—Ç OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
"""

import os
import json
import logging
from datetime import datetime
from collections import defaultdict
from typing import Dict, List
import asyncio

from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ OPENAI_API_KEY")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
chat_messages: Dict[int, List[Dict]] = defaultdict(list)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
MAX_MESSAGES_PER_CHAT = 100


class DialogueSummarizerBot:
    def __init__(self):
        self.client = client
        self.chat_messages = chat_messages
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = (
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.\n\n"
            "üìù –Ø –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏—Ö –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑.\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/summarize - –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "/clear - –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "/count - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –±—É–¥—É –∏—Ö —Å–æ—Ö—Ä–∞–Ω—è—Ç—å!"
        )
        await update.message.reply_text(welcome_message)
    
    async def save_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        user = update.effective_user
        message_text = update.message.text
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message_data = {
            'timestamp': datetime.now().isoformat(),
            'user_id': user.id,
            'username': user.username or user.first_name,
            'text': message_text
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.chat_messages[chat_id].append(message_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.chat_messages[chat_id]) > MAX_MESSAGES_PER_CHAT:
            self.chat_messages[chat_id] = self.chat_messages[chat_id][-MAX_MESSAGES_PER_CHAT:]
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username} –≤ —á–∞—Ç–µ {chat_id}")
    
    async def summarize_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summarize"""
        chat_id = update.effective_chat.id
        
        if not self.chat_messages[chat_id]:
            await update.message.reply_text(
                "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            messages_text = self._format_messages_for_summary(self.chat_messages[chat_id])
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –æ—Ç GPT-4.1-mini
            summary = await self._get_summary(messages_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response_message = (
                f"üìÑ **–ü–µ—Ä–µ—Å–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞** ({len(self.chat_messages[chat_id])} —Å–æ–æ–±—â–µ–Ω–∏–π)\n\n"
                f"{summary}\n\n"
                f"ü§ñ *–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é GPT-4.1-mini*"
            )
            
            await update.message.reply_text(response_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def _format_messages_for_summary(self, messages: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GPT"""
        formatted_messages = []
        
        for msg in messages:
            timestamp = datetime.fromisoformat(msg['timestamp']).strftime('%H:%M')
            username = msg['username']
            text = msg['text']
            formatted_messages.append(f"[{timestamp}] {username}: {text}")
        
        return "\n".join(formatted_messages)
    
    async def _get_summary(self, messages_text: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç OpenAI GPT-4.1-mini"""
        
        system_prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
2. –°–æ—Ö—Ä–∞–Ω–∏ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏—è
3. –£–∫–∞–∂–∏, –∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–ª –∏–ª–∏ —Ä–µ—à–∞–ª
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤ –∏–ª–∏ –∞–±–∑–∞—Ü–µ–≤
5. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
6. –ï—Å–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö —É–ø–æ–º—è–Ω–∏
7. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –Ω–µ —É–ø—É—Å–∫–∞–π –≤–∞–∂–Ω–æ–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üî∏ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:** [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã]
üî∏ **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:** [–≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏—è]
üî∏ **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** [–∫—Ç–æ —á—Ç–æ –¥–µ–ª–∞–ª/–ø—Ä–µ–¥–ª–∞–≥–∞–ª]
üî∏ **–ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:** [–µ—Å–ª–∏ –µ—Å—Ç—å]
"""
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–°–æ–∑–¥–∞–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:\n\n{messages_text}"}
                ],
                max_tokens=1000,
                temperature=0.3
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API: {e}")
            raise
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        chat_id = update.effective_chat.id
        
        if not self.chat_messages[chat_id]:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        message_count = len(self.chat_messages[chat_id])
        self.chat_messages[chat_id].clear()
        
        await update.message.reply_text(
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!"
        )
    
    async def count_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /count"""
        chat_id = update.effective_chat.id
        count = len(self.chat_messages[chat_id])
        
        if count == 0:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        else:
            await update.message.reply_text(
                f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}\n"
                f"üìù –ú–∞–∫—Å–∏–º—É–º: {MAX_MESSAGES_PER_CHAT}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞."
            )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤...")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
    print("üì± –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /start")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = DialogueSummarizerBot()
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("summarize", bot.summarize_command))
    application.add_handler(CommandHandler("clear", bot.clear_command))
    application.add_handler(CommandHandler("count", bot.count_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.save_message))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 